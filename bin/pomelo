#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs'),
  os = require('os'),
  path = require('path'),
  util = require('util'),
  cliff = require('cliff'),
  mkdirp = require('mkdirp'),
  co = require('../lib/modules/console'),
  utils = require('../lib/util/utils'),
  starter = require('../lib/master/starter'),
  exec = require('child_process').exec,
  spawn = require('child_process').spawn,
  version = require('../package.json').version,
  adminClient = require('pomelo-admin').adminClient,
  constants = require('../lib/util/constants'),
  program = require('commander'),
  pomeloManager = require('../lib/pomeloManager');

/**
 *  Constant Variables
 */
var TIME_INIT = 1 * 1000,
    TIME_KILL_WAIT = 5 * 1000,
    KILL_CMD_LUX = 'kill -9 `ps -ef|grep node|awk \'{print $2}\'`',
    KILL_CMD_WIN = 'taskkill /im node.exe /f',

    CUR_DIR = process.cwd(),
    DEFAULT_GAME_SERVER_DIR = CUR_DIR,
    DEFAULT_USERNAME = 'admin',
    DEFAULT_PWD = 'admin',
    DEFAULT_ENV = 'development',
    DEFAULT_MASTER_HOST = '127.0.0.1',
    DEFAULT_MASTER_PORT = 3005;

var CONNECT_ERROR = 'Failed to connect to admin console server.',
    FILEREAD_ERROR = 'Failed to read the file, please check if the application is started legally.',
    CLOSEAPP_INFO = 'Closing the application......\nPlease wait......',
    ADD_SERVER_INFO = 'Successfully added server.',
    RESTART_SERVER_INFO = 'Successfully restarted server.',
    INIT_PROJ_NOTICE = '\nThe default admin user is: \n\n'+ '  username'.green + ': admin\n  ' + 'password'.green+ ': admin\n\nYou can configure admin users by editing adminUser.json later.\n ',
    SCRIPT_NOT_FOUND = 'Failed to find an appropriate script to run,\nplease check the current work directory or the directory specified by option `--directory`.\n'.red,
    MASTER_HA_NOT_FOUND = 'Failed to find an appropriate masterha config file, \nplease check the current work directory or the arguments passed to.\n'.red,
    COMMAND_ERROR = 'Illegal command format. See `pomelo --help`.\n'.red,
    DAEMON_INFO = 'The application is now running in the background.\n';

program.version(version);

program.command('init [path]')
  .description('create a new application')
  .action(function(path) {
    pomeloManager.init(path || CUR_DIR);
  });

program.command('start')
  .description('start the application')
  .option('-e, --env <env>', 'set the environment. See config/servers.json and config/master.json for settings.', DEFAULT_ENV)
  .option('-D, --daemon', 'start Pomelo as a daemon.')
  .option('-d, --directory, <directory>', 'the code directory', DEFAULT_GAME_SERVER_DIR)
  .option('-t, --type <server-type>,', 'start server type')
  .option('-i, --id <server-id>', 'start server id')
  .action(function(opts) {
    pomeloManager.start(opts);
  });

program.command('list')
  .description('list all running servers')
  .option('-u, --username <username>', 'administration user name', DEFAULT_USERNAME)
  .option('-p, --password <password>', 'administration password', DEFAULT_PWD)
  .option('-h, --host <master-host>', 'master server host', DEFAULT_MASTER_HOST)
  .option('-P, --port <master-port>', 'master server port', DEFAULT_MASTER_PORT)
  .action(function(opts) {
    pomeloManager.list(opts);
  });

program.command('add')
  .description('add a new server')
  .option('-u, --username <username>', 'administration user name', DEFAULT_USERNAME)
  .option('-p, --password <password>', 'administration password', DEFAULT_PWD)
  .option('-h, --host <master-host>', 'master server host', DEFAULT_MASTER_HOST)
  .option('-P, --port <master-port>', 'master server port', DEFAULT_MASTER_PORT)
  .action(function() {
    var args = [].slice.call(arguments, 0);
    var opts = args[args.length - 1];
    opts.args = args.slice(0, -1);
    pomeloManager.add(opts);
  });

program.command('stop')
  .description('stop the servers, for multiple servers, use `pomelo stop server-id-1 server-id-2`')
  .option('-u, --username <username>', 'administration user name', DEFAULT_USERNAME)
  .option('-p, --password <password>', 'administration password', DEFAULT_PWD)
  .option('-h, --host <master-host>', 'master server host', DEFAULT_MASTER_HOST)
  .option('-P, --port <master-port>', 'master server port', DEFAULT_MASTER_PORT)
  .action(function() {
    var args = [].slice.call(arguments, 0);
    var opts = args[args.length - 1];
    opts.serverIds = args.slice(0, -1);
    pomeloManager.terminal('stop', opts);
  });

program.command('kill')
  .description('kill the Pomelo application. Recommend using stop command instead as it tears down application gracefully.')
  .option('-u, --username <username>', 'administration user name', DEFAULT_USERNAME)
  .option('-p, --password <password>', 'administration password', DEFAULT_PWD)
  .option('-h, --host <master-host>', 'master server host', DEFAULT_MASTER_HOST)
  .option('-P, --port <master-port>', 'master server port', DEFAULT_MASTER_PORT)
  .option('-f, --force', 'using this option would kill all the node processes')
  .action(function() {
    var args = [].slice.call(arguments, 0);
    var opts = args[args.length - 1];
    opts.serverIds = args.slice(0, -1);
    pomeloManager.terminal('kill', opts);
  });

program.command('restart')
  .description('restart the servers, for multiple servers, use `pomelo restart server-id-1 server-id-2`')
  .option('-u, --username <username>', 'administration user name', DEFAULT_USERNAME)
  .option('-p, --password <password>', 'administration password', DEFAULT_PWD)
  .option('-h, --host <master-host>', 'master server host', DEFAULT_MASTER_HOST)
  .option('-P, --port <master-port>', 'master server port', DEFAULT_MASTER_PORT)
  .option('-t, --type <server-type>,', 'start server type')
  .option('-i, --id <server-id>', 'start server id')
  .action(function(opts) {
    pomeloManager.restart(opts);
  });

program.command('masterha')
  .description('start all the slaves of the master')
  .option('-d, --directory <directory>', 'the code directory', DEFAULT_GAME_SERVER_DIR)
  .action(function(opts) {
    pomeloManager.startMasterha(opts);
  });

program.command('*')
  .action(function() {
    console.log(COMMAND_ERROR);
  });

program.parse(process.argv);